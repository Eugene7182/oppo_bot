import asyncio, calendar, logging, os, re
from datetime import datetime
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from pytz import timezone
from aiohttp import web

from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.webhook.aiohttp_server import SimpleRequestHandler

import db

# --- –ö–æ–Ω—Ñ–∏–≥ ---
TOKEN = os.getenv("BOT_TOKEN", "")
GROUP_CHAT_ID = int(os.getenv("GROUP_CHAT_ID", "-1002663663535"))
ADMINS_ENV = os.getenv("ADMINS", "").split(",") if os.getenv("ADMINS") else []
tz = timezone("Asia/Almaty")

WEBHOOK_HOST = os.getenv("WEBHOOK_HOST", "https://oppo-bot-k2d2.onrender.com")
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"
PORT = int(os.getenv("PORT", 10000))

# --- Telegram ---
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
router = Router()
dp.include_router(router)

logging.basicConfig(level=logging.INFO)

# --- –°–µ—Ç–∏ (–ø—Ä–æ—Å—Ç–æ —Ç–µ–≥–∏ –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤) ---
NETWORKS = ["mechta", "beeline", "sulpak", "sulpka", "td"]
def extract_network(text: str) -> str:
    t = (text or "").lower()
    for net in NETWORKS:
        if net in t:
            return net.capitalize()
    return "-"

# --- –ê–¥–º–∏–Ω—ã ---
def is_admin(username: str) -> bool:
    if not username:
        return False
    if username in ADMINS_ENV:
        return True
    return db.is_admin(username)

# --- –†–µ–≥—É–ª—è—Ä–∫–∏ ---
# –ü—Ä–æ–¥–∞–∂–∏: –¥–æ–ø—É—Å–∫–∞–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: "Reno 14 f 5 g", "14f", "14 5g", "reno14f", –ø–∞–º—è—Ç—å 64..1024(+—Ç–±/	tb), –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —á–µ—Ä–µ–∑ —Ç–∏—Ä–µ/–ø—Ä–æ–±–µ–ª—ã/–¥–≤–æ–µ—Ç–æ—á–∏–µ
SALE_RE = re.compile(
    r"((?:reno\s*)?\d{1,2}\s*(?:f)?\s*(?:5\s*g)?)\s*"     # –º–æ–¥–µ–ª—å (Reno 14 / 14f / 14 5g / 14f 5g), –ø—Ä–æ–±–µ–ª—ã –¥–æ–ø—É—Å–∫–∞—é—Ç—Å—è
    r"(\d{1,4})(?:—Ç–±|tb)?\s*"                             # –ø–∞–º—è—Ç—å (64..1024, –æ–ø—Ü. —Ç–±/tb)
    r"[-‚Äî: ]?\s*(\d+)?",                                  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ; -/‚Äî/:/–ø—Ä–æ–±–µ–ª)
    re.IGNORECASE
)

# –°—Ç–æ–∫–∏: —Å–≤–æ–±–æ–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç + –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ (8/256) –ø–µ—Ä–µ–¥ –ø–∞–º—è—Ç—å—é
STOCK_RE = re.compile(
    r"([a-z–∞-—è—ë0-9\+\-\s]+?)\s*"
    r"(?:\(?\d+\s*\/\s*\)?)?\s*"
    r"(\d{1,4})(?:—Ç–±|tb)?\s*"
    r"[-‚Äî: ]?\s*(\d+)?",
    re.IGNORECASE
)

# --------------------------
# –ï–î–ò–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö (—á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –¥–≤–æ–π–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤)
# --------------------------
@router.message()
async def sales_or_stock_handler(message: Message):
    if message.chat.id != GROUP_CHAT_ID or not message.text or message.text.startswith("/"):
        return

    text = message.text.strip()
    text_l = text.lower()
    if "–¥–æ–ª—è" in text_l:
        return

    user = message.from_user.username or str(message.from_user.id)
    network = extract_network(text)

    try:
        # --- –°–¢–û–ö–ò ---
        if any(w in text_l for w in ["—Å—Ç–æ–∫", "–æ—Å—Ç–∞—Ç–æ–∫", "stock", "stocks", "–ø—Ä–∏—Ö–æ–¥", "–ø—Ä–∏–µ—Ö–∞–ª"]):
            rows = text.splitlines()
            updated_items = []
            for row in rows:
                m = STOCK_RE.search(row)
                if not m:
                    continue
                model = m.group(1).strip().replace("  ", " ")
                memory = m.group(2)
                qty = int(m.group(3)) if m.group(3) else 0
                item_name = f"{model} {memory}"
                db.update_stock(user, item_name, qty, network)
                updated_items.append(f"{item_name} = {qty}")

            if updated_items:
                await message.reply("üì¶ –û–±–Ω–æ–≤–ª–µ–Ω–æ:\n" + "\n".join(updated_items) + f"\n(—Å–µ—Ç—å: {network})")
            else:
                # –Ω–µ —Ä—É–≥–∞–µ–º—Å—è: –ø—Ä–æ—Å—Ç–æ –º–æ–ª—á–∞ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º ¬´—à—É–º–Ω—ã–µ¬ª —Å—Ç—Ä–æ–∫–∏
                pass
            return

        # --- –ü–†–û–î–ê–ñ–ò ---
        matches = SALE_RE.findall(text)
        if not matches:
            return

        for model_raw, memory, qty_raw in matches:
            model = re.sub(r"\s+", "", model_raw).replace("reno", "reno")  # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–æ–±–µ–ª—ã –≤–Ω—É—Ç—Ä–∏ –º–æ–¥–µ–ª–∏
            qty = int(qty_raw) if qty_raw else 1

            # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–æ–¥–∞–∂—É
            db.add_sale(user, model, memory, qty, network)

            # –∏—â–µ–º "–ø–æ—Ö–æ–∂—É—é" –ø–æ–∑–∏—Ü–∏—é –≤ —Å—Ç–æ–∫–∞—Ö: –º–æ–¥–µ–ª—å+–ø–∞–º—è—Ç—å
            stock_item, stock_qty = db.find_stock_like(user, model, memory, network)
            if stock_item is None:
                await message.reply(f"‚ö† –û—Å—Ç–∞—Ç–æ–∫ –¥–ª—è {model} {memory} –Ω–µ –Ω–∞–π–¥–µ–Ω. @{user}, –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç–æ–∫!")
            elif stock_qty < qty:
                await message.reply(
                    f"‚ö† –£ @{user} –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Ç–æ–∫–∞ –¥–ª—è {stock_item} (–ø—Ä–æ–¥–∞–∂–∞ {qty}, –æ—Å—Ç–∞—Ç–æ–∫ {stock_qty})."
                )
            else:
                db.decrease_stock(user, stock_item, qty, network)

        await message.reply(f"‚úÖ –ü—Ä–æ–¥–∞–∂–∏ —É—á—Ç–µ–Ω—ã (—Å–µ—Ç—å: {network})")

    except Exception as e:
        await message.reply(f"‚ö† –û—à–∏–±–∫–∞: {e}")

# --------------------------
# –ê–î–ú–ò–ù-–ö–û–ú–ê–ù–î–´
# --------------------------
@router.message(F.text.startswith("/admins"))
async def cmd_admins(message: Message):
    if not is_admin(message.from_user.username): return
    admins_env = ", ".join(ADMINS_ENV) if ADMINS_ENV else "-"
    admins_db = ", ".join(db.get_admins()) or "-"
    await message.reply(f"üëë ENV: {admins_env}\nüë§ DB: {admins_db}")

@router.message(F.text.startswith("/add_admin"))
async def cmd_add_admin(message: Message):
    if not is_admin(message.from_user.username): return
    parts = message.text.split()
    if len(parts) != 2:
        return await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_admin @username")
    db.add_admin(parts[1].lstrip("@"))
    await message.reply(f"‚úÖ {parts[1]} –¥–æ–±–∞–≤–ª–µ–Ω")

@router.message(F.text.startswith("/del_admin"))
async def cmd_del_admin(message: Message):
    if not is_admin(message.from_user.username): return
    parts = message.text.split()
    if len(parts) != 2:
        return await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /del_admin @username")
    db.del_admin(parts[1].lstrip("@"))
    await message.reply(f"‚ùå {parts[1]} —É–¥–∞–ª—ë–Ω")

@router.message(F.text.startswith("/plan"))
async def cmd_plan(message: Message):
    if not is_admin(message.from_user.username): return
    parts = message.text.split()
    if len(parts) != 3:
        return await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /plan @username —á–∏—Å–ª–æ")
    db.set_plan(parts[1].lstrip("@"), int(parts[2]))
    await message.reply(f"‚úÖ –ü–ª–∞–Ω –¥–ª—è {parts[1]} = {parts[2]}")

@router.message(F.text.startswith("/sales_month"))
async def cmd_sales_month(message: Message):
    if not is_admin(message.from_user.username): return
    data = db.get_sales_month()
    if not data:
        return await message.reply("üìä –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –º–µ—Å—è—Ü.")
    txt = "üìä –ü—Ä–æ–¥–∞–∂–∏ –º–µ—Å—è—Ü–∞:\n"
    for u, qty, plan, net in data:
        percent = int(qty / plan * 100) if plan else 0
        txt += f"@{u} ({net}): {qty}/{plan or '-'} ({percent}%)\n"
    await message.reply(txt)

@router.message(F.text.startswith("/stocks"))
async def cmd_stocks(message: Message):
    if not is_admin(message.from_user.username): return
    rows = db.get_stocks()
    if not rows:
        return await message.reply("üì¶ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å—Ç–æ–∫–∞–º.")
    txt = "üì¶ –°—Ç–æ–∫–∏:\n"
    for u, item, qty, net, upd in rows:
        txt += f"@{u} {item}: {qty} (—Å–µ—Ç—å: {net}, {upd})\n"
    await message.reply(txt)

@router.message(F.text.startswith("/by_network"))
async def cmd_by_network(message: Message):
    if not is_admin(message.from_user.username): return
    parts = message.text.split()
    if len(parts) != 2:
        return await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /by_network Mechta")
    net = parts[1].capitalize()
    rows = db.get_sales_by_network(net)
    if not rows:
        return await message.reply(f"üìä –ü—Ä–æ–¥–∞–∂–∏ –ø–æ —Å–µ—Ç–∏ {net}: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
    txt = f"üìä –ü—Ä–æ–¥–∞–∂–∏ –ø–æ —Å–µ—Ç–∏ {net}:\n"
    for u, qty, plan in rows:
        percent = int(qty / plan * 100) if plan else 0
        txt += f"@{u}: {qty} / {plan or '-'} ({percent}%)\n"
    await message.reply(txt)

# --- –¢—Ä–∏–≥–≥–µ—Ä—ã –æ—Ç—á—ë—Ç–æ–≤ (–ø–æ –∫–æ–º–∞–Ω–¥–µ, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ---
@router.message(F.text.startswith("/daily_report"))
async def cmd_daily_report(message: Message):
    if not is_admin(message.from_user.username): return
    await daily_report()

@router.message(F.text.startswith("/weekly_projection"))
async def cmd_weekly_projection(message: Message):
    if not is_admin(message.from_user.username): return
    await weekly_projection()

@router.message(F.text.startswith("/monthly_report"))
async def cmd_monthly_report(message: Message):
    if not is_admin(message.from_user.username): return
    await monthly_report()

# --------------------------
# –ê–í–¢–û–û–¢–ß–Å–¢–´ (APSCHEDULER)
# --------------------------
async def daily_report():
    today = datetime.now(tz).strftime("%Y-%m-%d")
    sales = db.get_sales_all(today)
    txt = f"üìä –ü—Ä–æ–¥–∞–∂–∏ –∑–∞ {today}:\n" if sales else f"üìä {today}: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö."
    if sales:
        for u, qty, plan, net in sales:
            percent = int(qty / plan * 100) if plan else 0
            txt += f"@{u} ({net}): {qty}/{plan or '-'} ({percent}%)\n"
    await bot.send_message(GROUP_CHAT_ID, txt)

async def weekly_projection():
    today = datetime.now(tz)
    d = today.day
    total_days = calendar.monthrange(today.year, today.month)[1]
    data = db.get_sales_month()
    if not data:
        return
    txt = "üîÆ –ü—Ä–æ–≥–Ω–æ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞:\n"
    for u, qty, plan, net in data:
        if not plan:
            continue
        forecast = int((qty / max(d, 1)) * total_days)
        percent = int(forecast / plan * 100)
        txt += f"@{u} ({net}): {qty}/{plan}, –ø—Ä–æ–≥–Ω–æ–∑ {forecast} ({percent}%)\n"
    await bot.send_message(GROUP_CHAT_ID, txt)

async def monthly_report():
    today = datetime.now(tz)
    data = db.get_sales_month()
    txt = f"üìä –ò—Ç–æ–≥ –ø—Ä–æ–¥–∞–∂ –∑–∞ {today.strftime('%B %Y')}:\n"
    for u, qty, plan, net in data:
        percent = int(qty / plan * 100) if plan else 0
        txt += f"@{u} ({net}): {qty}/{plan or '-'} ({percent}%)\n"
    await bot.send_message(GROUP_CHAT_ID, txt)
    db.reset_monthly_sales()

async def weekly_stock_reminder():
    await bot.send_message(GROUP_CHAT_ID, "üì¶ –ù–∞–ø–æ–º–Ω–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")

# --------------------------
# MAIN (webhook + scheduler)
# --------------------------
async def main():
    # –°–±—Ä–æ—Å —Å—Ç–∞—Ä–æ–≥–æ –≤–µ–±—Ö—É–∫–∞ (—á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤) –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ
    await bot.delete_webhook(drop_pending_updates=True)
    await bot.set_webhook(WEBHOOK_URL)

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Ç—á—ë—Ç–æ–≤
    scheduler = AsyncIOScheduler()
    scheduler.add_job(daily_report, "cron", hour=21, minute=0, timezone="Asia/Almaty")
    scheduler.add_job(weekly_projection, "cron", day_of_week="sun", hour=12, minute=0, timezone="Asia/Almaty")
    scheduler.add_job(weekly_stock_reminder, "cron", day_of_week="sun", hour=12, minute=0, timezone="Asia/Almaty")
    scheduler.add_job(monthly_report, "cron", day="last", hour=20, minute=0, timezone="Asia/Almaty")
    scheduler.start()

    # HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Telegram (webhook)
    app = web.Application()
    SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path=WEBHOOK_PATH)

    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", PORT)
    await site.start()

    print(f"üöÄ Webhook –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ {WEBHOOK_URL}")
    while True:
        await asyncio.sleep(3600)

if __name__ == "__main__":
    asyncio.run(main())
