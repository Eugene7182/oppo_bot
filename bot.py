import asyncio
import calendar
import logging
import os
import re
from datetime import datetime
from difflib import get_close_matches

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from pytz import timezone
from aiohttp import web

from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.webhook.aiohttp_server import SimpleRequestHandler

import db

# =========================================================
# –ù–ê–°–¢–†–û–ô–ö–ò / –û–ö–†–£–ñ–ï–ù–ò–ï
# =========================================================
TOKEN = os.getenv("BOT_TOKEN", "")
GROUP_CHAT_ID = int(os.getenv("GROUP_CHAT_ID", "-1002663663535"))
ADMINS_ENV = os.getenv("ADMINS", "").split(",") if os.getenv("ADMINS") else []

# Render –ø—Ä–æ–∫–∏–¥—ã–≤–∞–µ—Ç –≤–Ω–µ—à–Ω–∏–π –∞–¥—Ä–µ—Å —Å—é–¥–∞
RENDER_EXTERNAL_URL = os.getenv("RENDER_EXTERNAL_URL", "").rstrip("/")
WEBHOOK_URL = f"{RENDER_EXTERNAL_URL}/webhook" if RENDER_EXTERNAL_URL else ""
PORT = int(os.getenv("PORT", 10000))

tz = timezone("Asia/Almaty")

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
router = Router()
dp.include_router(router)

# =========================================================
# –•–ï–õ–ü–ï–†–´
# =========================================================
def is_admin(username: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞: ENV + –ë–î"""
    if not username:
        return False
    if username in ADMINS_ENV:
        return True
    return db.is_admin(username)

def normalize_text(text: str) -> str:
    """–°–∫–ª–µ–π–∫–∏ –∏ —á–∏—Å—Ç–∫–∞: '14 F'‚Üí'14F', —É–±—Ä–∞—Ç—å –ª–∏—à–Ω–∏–µ —Ç–∏—Ä–µ/–ø—Ä–æ–±–µ–ª—ã."""
    if not text:
        return ""
    t = text

    # –°–∫–ª–µ–∏–≤–∞–µ–º —Ü–∏—Ñ—Ä—ã –∏ —Å–ª–µ–¥—É—é—â—É—é –±—É–∫–≤—É: "14 F" -> "14F"
    t = re.sub(r"(\d+)\s*([a-z–∞-—è—ë])", r"\1\2", t, flags=re.IGNORECASE)
    # –£–±–∏—Ä–∞–µ–º —Ç–∏—Ä–µ-–ø–µ—Ä–µ–≤–æ–¥—ã –≤ –ø—Ä–æ–±–µ–ª
    t = re.sub(r"[‚Äì‚Äî\-]+", " ", t)
    # –û–¥–∏–Ω–∞—Ä–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
    t = re.sub(r"\s+", " ", t).strip()
    return t

def extract_network(username: str, text: str) -> str:
    """
    –°–µ—Ç—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∑–∫–∞ /set_network,
    –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –ø—Ä–æ–±—É–µ–º –≤—ã—Ç–∞—â–∏—Ç—å –∏–∑ —Ç–µ–∫—Å—Ç–∞ (mechta, beeline, sulpak, td),
    –∏–Ω–∞—á–µ '-'.
    """
    bind = db.get_network(username)
    if bind and bind != "-":
        return bind
    t = (text or "").lower()
    for key in ["mechta", "beeline", "sulpak", "sulpka", "td"]:
        if key in t:
            return key.capitalize()
    return "-"

def closest_match(item: str, candidates: list[str], cutoff: float = 0.6) -> str | None:
    """–ù–µ—á—ë—Ç–∫–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ: –≤–µ—Ä–Ω—É—Ç—å –±–ª–∏–∂–∞–π—à—É—é —Å—Ç—Ä–æ–∫—É-–∫–∞–Ω–¥–∏–¥–∞—Ç–∞."""
    m = get_close_matches(item, candidates, n=1, cutoff=cutoff)
    return m[0] if m else None

# =========================================================
# –†–ï–ì–£–õ–Ø–†–ö–ò (–≥–∏–±–∫–∏–µ)
# =========================================================
# –ü—Ä–æ–¥–∞–∂–∏:
#   - –º–æ–¥–µ–ª—å = –æ–¥–Ω–∞ "—Å–∫–ª–µ–π–∫–∞" –∏–∑ –±—É–∫–≤/—Ü–∏—Ñ—Ä/+,-
#   - –ø–∞–º—è—Ç—å = 2..4 —Ü–∏—Ñ—Ä—ã –∏–ª–∏ TB/—Ç–±
#   - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —á–µ—Ä–µ–∑ - : –ø—Ä–æ–±–µ–ª
SALE_RE = re.compile(
    r"([a-z–∞-—è—ë0-9\-\+]+)\s+(\d{2,4}(?:tb|—Ç–±)?)\s*[-: ]?\s*(\d+)?",
    re.IGNORECASE
)

# –°—Ç–æ–∫–∏: —Å—Ç—Ä–æ–∫–∞ ‚Üí (–º–æ–¥–µ–ª—å) (–ø–∞–º—è—Ç—å) [-|:|–ø—Ä–æ–±–µ–ª] qty?
# –¥–æ–ø—É—Å–∫–∞–µ–º "(8/256)" (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º 8/)
STOCK_RE = re.compile(
    r"([a-z–∞-—è—ë0-9\+\-\s]+?)\s*(?:\(?\d+\s*/\s*)?(\d{2,4})(?:—Ç–±|tb)?\)?\s*[-: ]?\s*(\d+)?",
    re.IGNORECASE
)

# =========================================================
# –ï–î–ò–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–û–ë–©–ï–ù–ò–ô
# =========================================================
@router.message()
async def handle_message(message: Message):
    # –¢–æ–ª—å–∫–æ –Ω–∞—à –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç, –∏–≥–Ω–æ—Ä /commands, –∏–≥–Ω–æ—Ä "–¥–æ–ª—è"
    if message.chat.id != GROUP_CHAT_ID or not message.text or message.text.startswith("/"):
        return
    if "–¥–æ–ª—è" in message.text.lower():
        return

    raw_text = message.text
    text = normalize_text(raw_text)

    user = message.from_user.username or str(message.from_user.id)
    network = extract_network(user, text)

    try:
        # -------------------------------------------------
        # –ß–ê–°–¢–¨ 1: –°–¢–û–ö–ò (–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞)
        # -------------------------------------------------
        if any(w in text.lower() for w in ["—Å—Ç–æ–∫", "–æ—Å—Ç–∞—Ç–æ–∫", "stock", "stocks", "–ø—Ä–∏—Ö–æ–¥", "–ø—Ä–∏–µ—Ö–∞–ª"]):
            rows = raw_text.splitlines()
            updated = []
            # –ë—ã–ª–æ –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ö–æ—Ç—å —á—Ç–æ-—Ç–æ –≤ —Å—Ç–æ–∫–∞—Ö –î–û –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è?
            before = [r for r in db.get_stocks() if r[0] == user]

            for row in rows:
                m = STOCK_RE.search(normalize_text(row))
                if not m:
                    continue
                model = m.group(1).strip()
                memory = m.group(2)
                qty = int(m.group(3)) if m.group(3) else 0
                item_name = f"{model} {memory}"
                db.update_stock(user, item_name, qty, network)
                updated.append(f"{item_name} = {qty}")

            if updated:
                # –ï—Å–ª–∏ —ç—Ç–æ –ü–ï–†–í–´–ï —Å—Ç–æ–∫–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äî —Å–æ–æ–±—â–∞–µ–º, —á—Ç–æ —Ç–µ–ø–µ—Ä—å –≤–∫–ª—é—á—ë–Ω –∫–æ–Ω—Ç—Ä–æ–ª—å
                if not before:
                    await message.reply(
                        "üì¶ –°—Ç–æ–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –ù–∞—á–∏–Ω–∞—è —Å —ç—Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –ø—Ä–æ–¥–∞–∂–∏ –±—É–¥—É—Ç —Å–≤–µ—Ä—è—Ç—å—Å—è —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏.\n"
                        "–ï—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚Äî –±–æ—Ç –ø–æ–ø—Ä–æ—Å–∏—Ç –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é."
                    )
                # –û–±—â–∞—è –∫–≤–∏—Ç–∞–Ω—Ü–∏—è –ø–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—é
                await message.reply("üì¶ –û–±–Ω–æ–≤–ª–µ–Ω–æ:\n" + "\n".join(updated) + (f"\n(—Å–µ—Ç—å: {network})" if network != "-" else ""))
            else:
                await message.reply("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.")
            return

        # -------------------------------------------------
        # –ß–ê–°–¢–¨ 2: –ü–†–û–î–ê–ñ–ò
        # -------------------------------------------------
        matches = SALE_RE.findall(text)
        if not matches:
            return

        # –í—Å–µ —Å—Ç–æ–∫–∏ (–¥–ª—è –ø–æ–∏—Å–∫–∞/—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏)
        all_stocks = db.get_stocks()
        # –¢–æ–ª—å–∫–æ —Å—Ç–æ–∫–∏ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ (–µ—Å–ª–∏ –µ—Å—Ç—å) —Å–µ—Ç–∏
        def filter_user_stocks(rows):
            if network == "-":
                return [r for r in rows if r[0] == user]
            return [r for r in rows if r[0] == user and (r[3] == network)]

        user_stocks = filter_user_stocks(all_stocks)

        for model_raw, memory, qty_raw in matches:
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –º–æ–¥–µ–ª—å (—É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤–Ω—É—Ç—Ä–∏)
            model_norm = re.sub(r"\s+", "", model_raw).lower()
            mem_norm = memory.lower()
            qty = int(qty_raw) if qty_raw else 1

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–æ–¥–∞–∂—É –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ (—Ç–∏—Ö–∞—è –∑–∞–ø–∏—Å—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
            db.add_sale(user, model_norm, mem_norm, qty, network)

            # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ù–ï–¢ —Å—Ç–æ–∫–æ–≤ ‚Äî –ø—Ä–æ—Å—Ç–æ –º–æ–ª—á–∏–º –∏ –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è —Å–≤–µ—Ä—è—Ç—å
            if not user_stocks:
                continue

            # –ö–ª—é—á –∏–∑ –ø—Ä–æ–¥–∞–∂–∏
            sale_key = f"{model_norm} {mem_norm}".strip()

            # –ö–∞–Ω–¥–∏–¥–∞—Ç—ã –¥–ª—è fuzzy ‚Äî –¢–û–õ–¨–ö–û –µ–≥–æ —Å—Ç–æ–∫–∏ (–∏ –µ–≥–æ —Å–µ—Ç—å)
            stock_items = [row[1] for row in user_stocks]  # item string –∏–∑ stocks
            candidate = closest_match(sale_key, stock_items, cutoff=0.6)

            if not candidate:
                await message.reply(f"‚ö† –ú–æ–¥–µ–ª—å ¬´{sale_key}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –≤–∞—à–∏—Ö –æ—Å—Ç–∞—Ç–∫–∞—Ö. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç–æ–∫!")
                continue

            # –°–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ candidate
            current_qty = db.get_stock_qty(user, candidate, network)
            if current_qty is None:
                await message.reply(f"‚ö† –û—Å—Ç–∞—Ç–æ–∫ –¥–ª—è ¬´{candidate}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç–æ–∫!")
                continue

            if current_qty < qty:
                await message.reply(
                    f"‚ö† –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –æ—Å—Ç–∞—Ç–∫–∞ –¥–ª—è ¬´{candidate}¬ª: –ø—Ä–æ–¥–∞–∂–∞ {qty}, –æ—Å—Ç–∞—Ç–æ–∫ {current_qty}. "
                    "–û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç–æ–∫!"
                )
                continue

            # –í—Å—ë –æ–∫ ‚Äî —É–º–µ–Ω—å—à–∞–µ–º
            db.decrease_stock(user, candidate, qty, network)

        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ ‚Äî —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –±—ã–ª–∏ —Å—Ç–æ–∫–∏
        if user_stocks:
            await message.reply(f"‚úÖ –ü—Ä–æ–¥–∞–∂–∏ —É—á—Ç–µ–Ω—ã (—Å–µ—Ç—å: {network})")

    except Exception as e:
        await message.reply(f"‚ö† –û—à–∏–±–∫–∞: {e}")

# =========================================================
# –ö–û–ú–ê–ù–î–´ –ê–î–ú–ò–ù–ê
# =========================================================
@router.message(F.text.startswith("/admins"))
async def cmd_admins(message: Message):
    if not is_admin(message.from_user.username): return
    envs = ", ".join(ADMINS_ENV) if ADMINS_ENV else "-"
    dbs = ", ".join(db.get_admins()) or "-"
    await message.reply(f"üëë –ê–¥–º–∏–Ω—ã (ENV): {envs}\nüë§ –ê–¥–º–∏–Ω—ã (DB): {dbs}")

@router.message(F.text.startswith("/add_admin"))
async def cmd_add_admin(message: Message):
    if not is_admin(message.from_user.username): return
    parts = message.text.split()
    if len(parts) != 2:
        return await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_admin @username")
    db.add_admin(parts[1].lstrip("@"))
    await message.reply(f"‚úÖ {parts[1]} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω—ã")

@router.message(F.text.startswith("/del_admin"))
async def cmd_del_admin(message: Message):
    if not is_admin(message.from_user.username): return
    parts = message.text.split()
    if len(parts) != 2:
        return await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /del_admin @username")
    db.del_admin(parts[1].lstrip("@"))
    await message.reply(f"‚ùå {parts[1]} —É–¥–∞–ª—ë–Ω –∏–∑ –∞–¥–º–∏–Ω–æ–≤")

@router.message(F.text.startswith("/plan"))
async def cmd_plan(message: Message):
    if not is_admin(message.from_user.username): return
    parts = message.text.split()
    if len(parts) != 3:
        return await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /plan @username —á–∏—Å–ª–æ")
    username = parts[1].lstrip("@")
    try:
        plan = int(parts[2])
    except:
        return await message.reply("‚ö† –ü–ª–∞–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
    db.set_plan(username, plan)
    await message.reply(f"‚úÖ –ü–ª–∞–Ω –¥–ª—è @{username} = {plan}")

@router.message(F.text.startswith("/set_sales"))
async def cmd_set_sales(message: Message):
    if not is_admin(message.from_user.username): return
    parts = message.text.split()
    if len(parts) != 3:
        return await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_sales @username —á–∏—Å–ª–æ")
    username = parts[1].lstrip("@")
    try:
        qty = int(parts[2])
    except:
        return await message.reply("‚ö† –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
    db.set_sales(username, qty)
    await message.reply(f"‚úÖ –ü—Ä–æ–¥–∞–∂–∏ –¥–ª—è @{username} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤—Ä—É—á–Ω—É—é = {qty}")

@router.message(F.text.startswith("/set_network"))
async def cmd_set_network(message: Message):
    if not is_admin(message.from_user.username): return
    parts = message.text.split()
    if len(parts) != 3:
        return await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_network @username NetworkName")
    username = parts[1].lstrip("@")
    network = parts[2].capitalize()
    db.set_network(username, network)
    await message.reply(f"‚úÖ @{username} –∑–∞–∫—Ä–µ–ø–ª—ë–Ω –∑–∞ —Å–µ—Ç—å—é {network}")

@router.message(F.text.startswith("/stocks"))
async def cmd_stocks(message: Message):
    if not is_admin(message.from_user.username): return
    rows = db.get_stocks()
    if not rows:
        return await message.reply("üì¶ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å—Ç–æ–∫–∞–º.")
    txt = "üì¶ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å—Ç–æ–∫–∏:\n"
    for u, item, qty, net, upd in rows:
        txt += f"@{u} {item}: {qty} (—Å–µ—Ç—å: {net}, {upd})\n"
    await message.reply(txt)

@router.message(F.text.startswith("/sales_month"))
async def cmd_sales_month(message: Message):
    if not is_admin(message.from_user.username): return
    data = db.get_sales_month()
    if not data:
        return await message.reply("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –º–µ—Å—è—Ü.")
    txt = "üìä –ü—Ä–æ–¥–∞–∂–∏ –º–µ—Å—è—Ü–∞:\n"
    for u, qty, plan, net in data:
        percent = int(qty / plan * 100) if plan else 0
        txt += f"@{u} ({net}): {qty}/{plan or '-'} ({percent}%)\n"
    await message.reply(txt)

@router.message(F.text.startswith("/by_network"))
async def cmd_by_network(message: Message):
    if not is_admin(message.from_user.username): return
    parts = message.text.split(maxsplit=1)
    if len(parts) != 2:
        return await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /by_network Mechta")
    pick = parts[1].capitalize()

    # –ë–µ—Ä—ë–º –æ–±—â—É—é —Å–≤–æ–¥–∫—É –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Å–µ—Ç–∏ –∑–¥–µ—Å—å
    data = db.get_sales_month()
    data = [row for row in data if (row[3] or "-") == pick]
    if not data:
        return await message.reply(f"üìä –ü–æ —Å–µ—Ç–∏ {pick} –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
    txt = f"üìä –ü—Ä–æ–¥–∞–∂–∏ –ø–æ —Å–µ—Ç–∏ {pick}:\n"
    for u, qty, plan, _net in data:
        percent = int(qty / plan * 100) if plan else 0
        txt += f"@{u}: {qty}/{plan or '-'} ({percent}%)\n"
    await message.reply(txt)

# =========================================================
# –ê–í–¢–û-–û–¢–ß–Å–¢–´ –ò –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø
# =========================================================
async def daily_report():
    today = datetime.now(tz).strftime("%Y-%m-%d")
    sales = db.get_sales_all(today)
    txt = f"üìä –ü—Ä–æ–¥–∞–∂–∏ –∑–∞ {today}:\n" if sales else f"üìä {today}: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö."
    if sales:
        for u, qty, plan, net in sales:
            percent = int(qty / plan * 100) if plan else 0
            txt += f"@{u} ({net}): {qty}/{plan or '-'} ({percent}%)\n"
    await bot.send_message(GROUP_CHAT_ID, txt)

async def weekly_projection():
    today = datetime.now(tz)
    day = max(1, today.day)
    total_days = calendar.monthrange(today.year, today.month)[1]
    data = db.get_sales_month()
    if not data:
        return
    txt = "üîÆ –ü—Ä–æ–≥–Ω–æ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞:\n"
    for u, qty, plan, net in data:
        if not plan:
            continue
        forecast = int((qty / day) * total_days)
        percent = int(forecast / plan * 100)
        txt += f"@{u} ({net}): {qty}/{plan}, –ø—Ä–æ–≥–Ω–æ–∑ {forecast} ({percent}%)\n"
    await bot.send_message(GROUP_CHAT_ID, txt)

async def monthly_report():
    today = datetime.now(tz)
    data = db.get_sales_month()
    txt = f"üìä –ò—Ç–æ–≥ –ø—Ä–æ–¥–∞–∂ –∑–∞ {today.strftime('%B %Y')}:\n"
    for u, qty, plan, net in data:
        percent = int(qty / plan * 100) if plan else 0
        txt += f"@{u} ({net}): {qty}/{plan or '-'} ({percent}%)\n"
    await bot.send_message(GROUP_CHAT_ID, txt)
    db.reset_monthly_sales()

async def weekly_stock_reminder():
    await bot.send_message(GROUP_CHAT_ID, "üì¶ –ù–∞–ø–æ–º–Ω–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏!")

async def inactive_promoters_reminder(days_threshold: int = 3):
    """
    –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 20:30: –µ—Å–ª–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–¥–∞–∂–∏ >= 3 –¥–Ω–µ–π ‚Äî –ø–∏–Ω–≥—É–µ–º.
    –ù–∞–ø–æ–º–∏–Ω–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω–æ, –ø–æ–∫–∞ –Ω–µ –æ—Ç–ø–∏—à—É—Ç—Å—è.
    """
    all_stocks = db.get_stocks()
    users = sorted({row[0] for row in all_stocks})  # —Ç–æ–ª—å–∫–æ —Ç–µ, –∫—Ç–æ –≤–æ–æ–±—â–µ –∏–º–µ–µ—Ç —Å—Ç–æ–∫–∏
    for u in users:
        last_date = db.get_last_sale(u)  # "YYYY-MM-DD" –∏–ª–∏ None
        if not last_date:
            await bot.send_message(
                GROUP_CHAT_ID,
                f"‚ö† @{u}, —É –≤–∞—Å –µ—â—ë –Ω–µ—Ç –ø—Ä–æ–¥–∞–∂ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ. –û–±–Ω–æ–≤–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!"
            )
            continue
        try:
            days = (datetime.now(tz).date() - datetime.strptime(last_date, "%Y-%m-%d").date()).days
        except Exception:
            continue
        if days >= days_threshold:
            await bot.send_message(
                GROUP_CHAT_ID,
                f"‚ö† @{u}, –≤—ã –Ω–µ –ø–∏—Å–∞–ª–∏ –ø—Ä–æ–¥–∞–∂–∏ {days} –¥–Ω–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏!"
            )

# =========================================================
# –ó–ê–ü–£–°–ö: webhook + scheduler
# =========================================================
async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î (–Ω–∞ –≤—Å—è–∫–∏–π)
    db.init_db()

    # –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ä—ã–π webhook –∏ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π (–∑–∞—â–∏—Ç–∞ –æ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤)
    await bot.delete_webhook(drop_pending_updates=True)
    if WEBHOOK_URL:
        await bot.set_webhook(WEBHOOK_URL)
    else:
        logging.warning("WEBHOOK_URL –ø—É—Å—Ç. –ü—Ä–æ–≤–µ—Ä—å RENDER_EXTERNAL_URL –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler = AsyncIOScheduler()
    scheduler.add_job(daily_report, "cron", hour=21, minute=0, timezone="Asia/Almaty")
    scheduler.add_job(weekly_projection, "cron", day_of_week="sun", hour=12, minute=0, timezone="Asia/Almaty")
    scheduler.add_job(weekly_stock_reminder, "cron", day_of_week="sun", hour=12, minute=0, timezone="Asia/Almaty")
    scheduler.add_job(monthly_report, "cron", day="last", hour=20, minute=0, timezone="Asia/Almaty")
    scheduler.add_job(inactive_promoters_reminder, "cron", hour=20, minute=30, timezone="Asia/Almaty")
    scheduler.start()

    # HTTP-—Å–µ—Ä–≤–µ—Ä –ø–æ–¥ webhook
    app = web.Application()

    # healthcheck (—á—Ç–æ–±—ã Render –Ω–µ —Å—ã–ø–∞–ª 404 –ø–æ /)
    async def health(_):
        return web.Response(text="OK")
    app.router.add_get("/", health)

    SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path="/webhook")

    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", PORT)
    await site.start()

    print(f"üöÄ Webhook –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ {WEBHOOK_URL or '(URL –Ω–µ –∑–∞–¥–∞–Ω)'}")
    while True:
        await asyncio.sleep(3600)

if __name__ == "__main__":
    asyncio.run(main())
