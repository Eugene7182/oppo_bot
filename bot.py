import asyncio
import calendar
import logging
import os
import re
from datetime import datetime, timedelta

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from pytz import timezone
from aiohttp import web

from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.webhook.aiohttp_server import SimpleRequestHandler
from aiogram.filters import Command

import db

# =========================
# --- –ö–æ–Ω—Ñ–∏–≥ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
# =========================
TOKEN = os.getenv("BOT_TOKEN", "")
GROUP_CHAT_ID = int(os.getenv("GROUP_CHAT_ID", "-1000000000000"))
ADMINS_ENV = [s.strip().lstrip("@") for s in os.getenv("ADMINS", "").split(",")] if os.getenv("ADMINS") else []
tz = timezone("Asia/Almaty")

WEBHOOK_URL = f"{os.getenv('RENDER_EXTERNAL_URL')}/webhook"
PORT = int(os.getenv("PORT", 10000))

# ==============
# --- Telegram
# ==============
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
router = Router()
dp.include_router(router)

logging.basicConfig(level=logging.INFO)

# =========================
# --- –£—Ç–∏–ª–∏—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
# =========================
def now_ala():
    return datetime.now(tz)

def yyyymm(dt: datetime) -> str:
    return dt.strftime("%Y-%m")

def parse_yyyymm(s: str | None) -> tuple[int, int]:
    if not s:
        d = now_ala()
        return d.year, d.month
    s = s.strip()
    if re.fullmatch(r"\d{4}-\d{2}", s):
        year, month = s.split("-")
        return int(year), int(month)
    if re.fullmatch(r"\d{6}", s):
        return int(s[:4]), int(s[4:])
    raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –º–µ—Å—è—Ü–∞. –ñ–¥—É YYYY-MM, –Ω–∞–ø—Ä–∏–º–µ—Ä 2025-08.")

def pct(a: int, b: int) -> str:
    if b <= 0:
        return "‚Äî"
    return f"{round(a * 100 / b)}%"

def bold(s: str) -> str:
    return f"<b>{s}</b>"

def code(s: str) -> str:
    return f"<code>{s}</code>"

def eusername(message: Message) -> str:
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @username –±–µ–∑ @ –∏–ª–∏ —á–∏—Å–ª–æ–≤–æ–π id
    return (message.from_user.username or str(message.from_user.id)).lstrip("@")

def extract_mentioned_username(text: str) -> str | None:
    m = re.search(r"@([A-Za-z0-9_]+)", text or "")
    return m.group(1) if m else None

def token_is_month(token: str) -> bool:
    return bool(re.fullmatch(r"\d{4}-\d{2}", token) or re.fullmatch(r"\d{6}", token))

def human_network_or_user(u: str) -> str:
    """–ö—Ä–∞—Å–∏–≤–æ–µ –∏–º—è: —Å–µ—Ç—å ‚Üí @username ‚Üí id"""
    net = db.get_network(u)
    if net and net != "-":
        return net
    if re.fullmatch(r"\d+", u):
        return u
    return f"@{u}"

def resolve_subject_to_username(arg: str) -> str:
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç ¬´—Å—É–±—ä–µ–∫—Ç¬ª –∫–æ–º–∞–Ω–¥: @username | user_id | network_name.
    1) –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ä–æ–≤–Ω–æ –æ–¥–Ω–æ–≥–æ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Å–µ—Ç–∏.
    2) –ï—Å–ª–∏ —Å–µ—Ç—å –Ω–µ –Ω–∞—à–ª–∞—Å—å/–Ω–∞—à–ª–æ—Å—å –Ω–µ—Å–∫–æ–ª—å–∫–æ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ username/id.
    """
    tok = (arg or "").strip().lstrip("@")
    if not tok:
        raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å/—Å–µ—Ç—å.")
    users = db.find_users_by_network(tok)
    if len(users) == 1:
        return users[0]
    if len(users) > 1:
        raise ValueError(f"–°–µ—Ç—å '{tok}' –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º: {', '.join('@'+u for u in users)}. –£—Ç–æ—á–Ω–∏.")
    return tok  # username/id

# -------------------------
# –û–±—ë—Ä—Ç–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
# -------------------------
def list_admins_safe():
    if hasattr(db, "list_admins"):
        try:
            return db.list_admins()
        except Exception:
            pass
    if hasattr(db, "get_admins"):
        try:
            return db.get_admins()
        except Exception:
            pass
    return []

def get_last_sale_dt(username: str):
    if hasattr(db, "get_last_sale_time"):
        try:
            return db.get_last_sale_time(username)
        except Exception:
            return None
    if hasattr(db, "get_last_sale"):
        try:
            s = db.get_last_sale(username)
            if not s:
                return None
            return tz.localize(datetime.strptime(s, "%Y-%m-%d"))
        except Exception:
            return None
    return None

# ======================
# --- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–µ—Ç–∏
# ======================
def extract_network(username: str, text: str | None) -> str:
    bind = db.get_network(username)
    if bind and bind != "-":
        return bind
    t = (text or "").lower()
    for key in ["mechta", "beeline", "sulpak", "sulpka", "td"]:
        if key in t:
            return key.capitalize()
    return "-"

# ===============
# --- –ê–¥–º–∏–Ω—ã ---
# ===============
def is_admin(username: str) -> bool:
    if not username:
        return False
    if username.lstrip("@") in ADMINS_ENV:
        return True
    return db.is_admin(username.lstrip("@"))

async def admin_guard(message: Message) -> bool:
    if not is_admin(eusername(message)):
        await message.reply("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
        return False
    return True

# ============================
# --- –†–µ–≥—É–ª—è—Ä–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ ---
# ============================
# –ü–∞—Ä—Å–∏–º ¬´–∫—Ä–∏–≤—ã–µ¬ª –ø—Ä–æ–¥–∞–∂–∏, —Ç–∏–ø–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –ø—Ä–æ–º–æ—É—Ç–µ—Ä–æ–≤
SALE_RE = re.compile(
    r"((?:reno\s*)?\d{1,2}\s*(?:f)?\s*(?:5\s*g)?)\s*(\d{1,4})(?:—Ç–±|tb)?\s*[-‚Äî: ]?\s*(\d+)?",
    re.IGNORECASE
)

# –ü—Ä–∏–º–µ—Ä —Å—Ç—Ä–æ–∫ —Å—Ç–æ–∫–∞: "Reno 11F 5G 128 - 3"
STOCK_RE = re.compile(
    r"([a-z–∞-—è—ë0-9\+\-\s]+?)\s*(?:\(?\d+\s*/\s*\)?)?\s*(\d{1,4})(?:—Ç–±|tb)?\s*[-‚Äî: ]?\s*(\d+)?",
    re.IGNORECASE
)

# ==================================
# –ï–î–ò–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –¢–ï–ö–°–¢–û–í (–±–µ–∑ /)
# ==================================
@router.message(F.text & ~F.text.startswith("/"))
async def handle_message(message: Message):
    if message.chat.id != GROUP_CHAT_ID:
        return

    text = message.text.strip()
    if not text or text.startswith("/") or "–¥–æ–ª—è" in text.lower():
        return

    user = eusername(message)
    network = extract_network(user, text)

    try:
        # --- –°–¢–û–ö–ò ---
        if any(w in text.lower() for w in ["—Å—Ç–æ–∫", "–æ—Å—Ç–∞—Ç–æ–∫", "stock", "stocks", "–ø—Ä–∏—Ö–æ–¥", "–ø—Ä–∏–µ—Ö–∞–ª", "–ø–æ—Å—Ç—É–ø–∏–ª", "–æ—Å—Ç–∞—Ç–∫–∏"]):
            rows = text.splitlines()
            updated = []
            for row in rows:
                m = STOCK_RE.search(row)
                if not m:
                    continue
                model = re.sub(r"\s+", " ", m.group(1)).strip()
                memory = m.group(2)
                qty = int(m.group(3)) if m.group(3) else 0
                item_name = f"{model} {memory}"
                db.update_stock(user, item_name, qty, network)
                updated.append(f"{item_name} = {qty}")
            if updated:
                net_h = network if network != "-" else "‚Äî"
                await message.reply("üì¶ –û–±–Ω–æ–≤–ª–µ–Ω–æ:\n" + "\n".join(updated) + f"\n–°–µ—Ç—å: {net_h}")
            return

        # --- –ü–†–û–î–ê–ñ–ò ---
        matches = SALE_RE.findall(text)
        if not matches:
            return

        # –ï—Å—Ç—å –ª–∏ —É —é–∑–µ—Ä–∞ —Å—Ç–æ–∫–∏ (—á—Ç–æ–±—ã —É–º–µ—Ç—å —Å–ø–∏—Å—ã–≤–∞—Ç—å)
        user_stocks = [row for row in db.get_stocks() if row[0] == user]

        for model_raw, memory, qty_raw in matches:
            model_norm = re.sub(r"\s+", "", model_raw).lower()
            qty = int(qty_raw) if qty_raw else 1

            # –ó–∞–ø–∏—Å—å –ø—Ä–æ–¥–∞–∂–∏
            db.add_sale(user, model_norm, str(memory), qty, network)

            # –°—Ç–æ–∫–∏
            if not user_stocks:
                continue

            stock_item, stock_qty = db.find_stock_like(user, model_norm, str(memory), network)
            if stock_item is None:
                await message.reply(f"‚ö†Ô∏è –û—Å—Ç–∞—Ç–æ–∫ –¥–ª—è {model_norm} {memory} –Ω–µ –Ω–∞–π–¥–µ–Ω. {human_network_or_user(user)}, –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç–æ–∫!")
            elif stock_qty < qty:
                await message.reply(f"‚ö†Ô∏è –£ {human_network_or_user(user)} –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Ç–æ–∫–∞ –¥–ª—è {stock_item} (–ø—Ä–æ–¥–∞–∂–∞ {qty}, –æ—Å—Ç–∞—Ç–æ–∫ {stock_qty}).")
            else:
                db.decrease_stock(user, stock_item, qty, network)

        if user_stocks:
            await message.reply(f"‚úÖ –ü—Ä–æ–¥–∞–∂–∏ —É—á—Ç–µ–Ω—ã. –°–µ—Ç—å: {network if network!='-' else '‚Äî'}")

    except Exception as e:
        logging.exception("handle_message error")
        await message.reply(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")


# ============================
# --- –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞/–ø–æ–ª—å–∑—ã ---
# ============================

@router.message(Command("ping"))
async def cmd_ping(message: Message):
    await message.reply("üèì –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")

@router.message(Command("help"))
async def cmd_help(message: Message):
    txt = [
        bold("–ö–æ–º–∞–Ω–¥—ã:"),
        "/help ‚Äî —ç—Ç–æ –º–µ–Ω—é",
        "/stocks [@user|user_id|network] [network_filter] ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–æ–∫–∏",
        "/sales_month [YYYY-MM] [@user|user_id|network] ‚Äî –ø—Ä–æ–¥–∞–∂–∏ –∑–∞ –º–µ—Å—è—Ü",
        "/set_network @user|user_id network –∏–ª–∏ '-' ‚Äî –ø—Ä–∏–≤—è–∑–∞—Ç—å –∏–ª–∏ —É–±—Ä–∞—Ç—å —Å–µ—Ç—å",
        "/set_sales @user|user_id|network model memory qty [network] ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥–∞–∂—É",
        "/set_plan @user|user_id|network|all PLAN [YYYY-MM] ‚Äî –∑–∞–¥–∞—Ç—å –ø–ª–∞–Ω",
        "/set_fact @user|user_id|network QTY [YYYY-MM] ‚Äî –ñ–Å–°–¢–ö–û –∑–∞–¥–∞—Ç—å —Ñ–∞–∫—Ç –º–µ—Å—è—Ü–∞",
        "/add_fact @user|user_id|network QTY [YYYY-MM] ‚Äî –î–û–ë–ê–í–ò–¢–¨ –∫ —Ñ–∞–∫—Ç—É –º–µ—Å—è—Ü–∞",
        "/plan_show [YYYY-MM] ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø–ª–∞–Ω—ã",
        "/admins_show ‚Äî —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤",
        "/admin_add @user ‚Äî –≤—ã–¥–∞—Ç—å –∞–¥–º–∏–Ω–∞",
        "/admin_remove @user ‚Äî –∑–∞–±—Ä–∞—Ç—å –∞–¥–º–∏–Ω–∞",
    ]
    await message.reply("\n".join(txt))

@router.message(Command("admins_show")))
async def cmd_admins_show(message: Message):
    if not await admin_guard(message):
        return
    env = ", ".join(f"@{u}" for u in ADMINS_ENV) if ADMINS_ENV else "‚Äî"
    dbs = ", ".join(f"@{u}" for u in list_admins_safe()) or "‚Äî"
    await message.reply(f"üëÆ ENV: {env}\nüëÆ DB: {dbs}")

@router.message(Command("admin_add")))
async def cmd_admin_add(message: Message):
    if not await admin_guard(message):
        return
    u = extract_mentioned_username(message.text)
    if not u:
        await message.reply("–§–æ—Ä–º–∞—Ç: /admin_add @user")
        return
    db.add_admin(u)
    await message.reply(f"‚úÖ @{u} —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω.")

@router.message(Command("admin_remove")))
async def cmd_admin_remove(message: Message):
    if not await admin_guard(message):
        return
    u = extract_mentioned_username(message.text)
    if not u:
        await message.reply("–§–æ—Ä–º–∞—Ç: /admin_remove @user")
        return
    db.remove_admin(u)
    await message.reply(f"üóëÔ∏è @{u} —É–¥–∞–ª—ë–Ω –∏–∑ –∞–¥–º–∏–Ω–æ–≤.")

@router.message(Command("set_network")))
async def cmd_set_network(message: Message):
    if not await admin_guard(message):
        return
    parts = (message.text or "").split()
    if len(parts) < 3:
        await message.reply("–§–æ—Ä–º–∞—Ç: /set_network @user|user_id network –∏–ª–∏ '-'")
        return
    subj = parts[1]
    network = parts[-1]
    u = subj.lstrip("@")  # –¥–ª—è set_network –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∏ —Å–µ—Ç—å –ø–æ–∑–∂–µ
    db.set_network(u, "-" if network == "-" else network)
    await message.reply(f"üîó {human_network_or_user(u)} ‚Üí —Å–µ—Ç—å: {network if network!='-' else '‚Äî'}")

@router.message(Command("stocks")))
async def cmd_stocks(message: Message):
    # /stocks [@user|user_id|network] [network_filter]
    parts = (message.text or "").split()
    args = parts[1:]

    viewer = eusername(message)
    target = viewer
    net = None

    if args:
        subj = args[0]
        try:
            target = resolve_subject_to_username(subj)
        except ValueError:
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å–µ—Ç—å –∏ –Ω–µ @user/ID ‚Äî —Ç—Ä–∞–∫—Ç—É–µ–º –∫–∞–∫ —Ñ–∏–ª—å—Ç—Ä —Å–µ—Ç–∏
            net = subj if subj != "-" else None
        if len(args) >= 2 and net is None:
            net = args[1] if args[1] != "-" else None

    if target != viewer and not is_admin(viewer):
        await message.reply("‚õî –ú–æ–∂–Ω–æ —Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —Å—Ç–æ–∫–∏ (–∏–ª–∏ –±—ã—Ç—å –∞–¥–º–∏–Ω–æ–º).")
        return

    rows = db.get_stocks(username=target, network=net)
    if not rows:
        await message.reply(f"üì¶ –°—Ç–æ–∫–æ–≤ –Ω–µ—Ç. {human_network_or_user(target)} —Å–µ—Ç—å: {net or db.get_network(target)}")
        return

    lines = [bold(f"üì¶ –°—Ç–æ–∫–∏ {human_network_or_user(target)} (—Å–µ—Ç—å: {net or db.get_network(target)})")]
    for _, item, qty, network in rows:
        lines.append(f"{item} ‚Äî {qty}")
    await message.reply("\n".join(lines))

@router.message(Command("sales_month")))
async def cmd_sales_month(message: Message):
    parts = (message.text or "").split()
    args = parts[1:]

    viewer = eusername(message)
    target = viewer
    arg_month = None
    subj = None

    for t in args:
        if token_is_month(t) and arg_month is None:
            arg_month = t
        elif subj is None:
            subj = t

    if subj:
        try:
            target = resolve_subject_to_username(subj)
        except ValueError as e:
            await message.reply(f"‚ö†Ô∏è {e}")
            return

    year, month = parse_yyyymm(arg_month)

    if target != viewer and not is_admin(viewer):
        await message.reply("‚õî –ú–æ–∂–Ω–æ —Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –ø—Ä–æ–¥–∞–∂–∏ (–∏–ª–∏ –±—ã—Ç—å –∞–¥–º–∏–Ω–æ–º).")
        return

    total, by_model = db.month_sales(year, month, username=target)
    plan = db.get_plan(target, f"{year:04d}-{month:02d}") or 0
    k = pct(total, plan) if plan else "‚Äî"

    hdr = bold(f"üìà –ü—Ä–æ–¥–∞–∂–∏ {human_network_or_user(target)} –∑–∞ {year:04d}-{month:02d}") + \
          f"\n–ü–ª–∞–Ω: {plan} | –§–∞–∫—Ç: {total} | –í—ã–ø: {k}"
    lines = [hdr]
    if by_model:
        for m, s in sorted(by_model.items(), key=lambda x: (-x[1], x[0])):
            lines.append(f"‚Ä¢ {m} ‚Äî {s}")
    await message.reply("\n".join(lines))

@router.message(Command("set_sales")))
async def cmd_set_sales(message: Message):
    if not await admin_guard(message):
        return
    # /set_sales <@user|user_id|network> <model> <memory> <qty> [network]
    parts = (message.text or "").split()
    args = parts[1:]
    if len(args) < 3:
        await message.reply("–§–æ—Ä–º–∞—Ç: /set_sales @user|user_id|network model memory qty [network]")
        return

    subj = args[0]
    try:
        u = resolve_subject_to_username(subj)
    except ValueError as e:
        await message.reply(f"‚ö†Ô∏è {e}")
        return

    rest = args[1:]
    if len(rest) < 3:
        await message.reply("–§–æ—Ä–º–∞—Ç: /set_sales @user|user_id|network model memory qty [network]")
        return

    try:
        model = re.sub(r"\s+", "", rest[0]).lower()
        memory = str(int(rest[1]))
        qty = int(rest[2])
        net = rest[3] if len(rest) >= 4 else db.get_network(u) or "-"
        db.add_sale(u, model, memory, qty, net)
        await message.reply(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {human_network_or_user(u)} {model} {memory} x{qty} (—Å–µ—Ç—å: {net})")
    except Exception as e:
        await message.reply(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")

@router.message(Command("set_plan")))
async def cmd_set_plan(message: Message):
    if not await admin_guard(message):
        return
    # /set_plan <@user|user_id|network|all> <PLAN> [YYYY-MM]
    parts = (message.text or "").split()
    if len(parts) < 3:
        await message.reply("–§–æ—Ä–º–∞—Ç: /set_plan @user|user_id|network|all PLAN [YYYY-MM]")
        return

    subj = parts[1]
    target_all = (subj.lower() == "all")

    nums = [p for p in parts if re.fullmatch(r"\d+", p)]
    ym_tokens = [p for p in parts if token_is_month(p)]
    if not nums:
        await message.reply("–£–∫–∞–∂–∏ –ø–ª–∞–Ω, –Ω–∞–ø—Ä–∏–º–µ—Ä 120.")
        return
    plan_val = int(nums[0])
    ym_s = ym_tokens[0] if ym_tokens else None
    y, m = parse_yyyymm(ym_s)
    ym_key = f"{y:04d}-{m:02d}"

    if target_all:
        users = db.get_all_known_users()
        for u in users:
            db.set_plan(u, ym_key, plan_val)
        await message.reply(f"‚úÖ –ü–ª–∞–Ω {plan_val} –ø—Ä–æ—Å—Ç–∞–≤–ª–µ–Ω –≤—Å–µ–º –Ω–∞ {ym_key}.")
        return

    try:
        tgt_user = resolve_subject_to_username(subj)
    except ValueError as e:
        await message.reply(f"‚ö†Ô∏è {e}")
        return

    db.set_plan(tgt_user, ym_key, plan_val)
    await message.reply(f"‚úÖ –ü–ª–∞–Ω {human_network_or_user(tgt_user)}: {plan_val} –Ω–∞ {ym_key}")

@router.message(Command("plan_show")))
async def cmd_plan_show(message: Message):
    # /plan_show [YYYY-MM]
    parts = (message.text or "").split()
    ym = None
    for p in parts[1:]:
        if token_is_month(p):
            ym = p
            break
    y, m = parse_yyyymm(ym)
    ym_key = f"{y:04d}-{m:02d}"
    plans = db.get_all_plans(ym_key)
    if not plans:
        await message.reply(f"–ü–ª–∞–Ω—ã –Ω–∞ {ym_key} –Ω–µ –∑–∞–¥–∞–Ω—ã.")
        return
    lines = [bold(f"üìã –ü–ª–∞–Ω—ã –Ω–∞ {ym_key}")]
    for u, p in sorted(plans.items()):
        total, _ = db.month_sales(y, m, username=u)
        lines.append(f"{human_network_or_user(u)}: –ø–ª–∞–Ω {p} | —Ñ–∞–∫—Ç {total} | {pct(total, p)}")
    await message.reply("\n".join(lines))

@router.message(Command("set_fact")))
async def cmd_set_fact(message: Message):
    """
    /set_fact <@user|user_id|network> <QTY> [YYYY-MM]
    –ñ—ë—Å—Ç–∫–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ñ–∞–∫—Ç –∑–∞ –º–µ—Å—è—Ü (—É–¥–∞–ª—è–µ—Ç –≤—Å–µ –ø—Ä–æ–¥–∞–∂–∏ –∑–∞ –º–µ—Å—è—Ü –∏ —Å—Ç–∞–≤–∏—Ç –æ–¥–Ω—É 'manual').
    """
    if not await admin_guard(message):
        return

    parts = (message.text or "").split()
    args = parts[1:]
    if len(args) < 2:
        await message.reply("–§–æ—Ä–º–∞—Ç: /set_fact @user|user_id|network QTY [YYYY-MM]")
        return

    subj = args[0]
    qty_token = None
    ym_token = None
    for t in args[1:]:
        if qty_token is None and re.fullmatch(r"\d+", t):
            qty_token = t
        elif ym_token is None and token_is_month(t):
            ym_token = t

    if qty_token is None:
        await message.reply("–£–∫–∞–∂–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 25.")
        return

    try:
        u = resolve_subject_to_username(subj)
    except ValueError as e:
        await message.reply(f"‚ö†Ô∏è {e}")
        return

    y, m = parse_yyyymm(ym_token)
    ym_key = f"{y:04d}-{m:02d}"
    net = db.get_network(u) or "-"

    try:
        db.set_monthly_fact(u, ym_key, int(qty_token), net)
        await message.reply(f"‚úÖ –§–∞–∫—Ç –¥–ª—è {human_network_or_user(u)} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {qty_token} –∑–∞ {ym_key}.")
    except Exception as e:
        await message.reply(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")

@router.message(Command("add_fact")))
async def cmd_add_fact(message: Message):
    """
    /add_fact <@user|user_id|network> <QTY> [YYYY-MM]
    –î–æ–±–∞–≤–ª—è–µ—Ç –∫ —Ñ–∞–∫—Ç—É –∑–∞ –º–µ—Å—è—Ü (–≤—Å—Ç–∞–≤–ª—è–µ—Ç –µ—â—ë –æ–¥–Ω—É 'manual' –∑–∞–ø–∏—Å—å).
    """
    if not await admin_guard(message):
        return

    parts = (message.text or "").split()
    args = parts[1:]
    if len(args) < 2:
        await message.reply("–§–æ—Ä–º–∞—Ç: /add_fact @user|user_id|network QTY [YYYY-MM]")
        return

    subj = args[0]
    qty_token = None
    ym_token = None
    for t in args[1:]:
        if qty_token is None and re.fullmatch(r"\d+", t):
            qty_token = t
        elif ym_token is None and token_is_month(t):
            ym_token = t

    if qty_token is None:
        await message.reply("–£–∫–∞–∂–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 5.")
        return

    try:
        u = resolve_subject_to_username(subj)
    except ValueError as e:
        await message.reply(f"‚ö†Ô∏è {e}")
        return

    y, m = parse_yyyymm(ym_token)
    ym_key = f"{y:04d}-{m:02d}"
    net = db.get_network(u) or "-"

    try:
        db.add_monthly_fact(u, ym_key, int(qty_token), net)
        await message.reply(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ –∫ —Ñ–∞–∫—Ç—É {human_network_or_user(u)}: +{qty_token} –∑–∞ {ym_key}.")
    except Exception as e:
        await message.reply(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")

# ============================
# --- –û—Ç—á—ë—Ç—ã –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ---
# ============================
async def daily_report():
    d = now_ala()
    y, m = d.year, d.month
    days_in_month = calendar.monthrange(y, m)[1]
    day = d.day
    ym_key = f"{y:04d}-{m:02d}"

    users = db.get_all_known_users()
    if not users:
        return

    lines = [bold(f"üóìÔ∏è –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç {ym_key} (–Ω–∞ {d.strftime('%d.%m %H:%M')})")]
    for u in sorted(users):
        fact, _ = db.month_sales(y, m, username=u)
        plan = db.get_plan(u, ym_key) or 0
        pr = pct(fact, plan) if plan else "‚Äî"
        pace = (fact / day) if day > 0 else 0
        proj = round(pace * days_in_month)
        lines.append(f"{human_network_or_user(u)}: —Ñ–∞–∫—Ç {fact} / –ø–ª–∞–Ω {plan} ({pr}), –ø—Ä–æ–µ–∫—Ü–∏—è {proj}")
    await bot.send_message(GROUP_CHAT_ID, "\n".join(lines))

async def weekly_projection():
    d = now_ala()
    y, m = d.year, d.month
    days_in_month = calendar.monthrange(y, m)[1]
    day = d.day
    ym_key = f"{y:04d}-{m:02d}"

    users = db.get_all_known_users()
    if not users:
        return

    lines = [bold(f"üìà –ù–µ–¥–µ–ª—å–Ω–∞—è –ø—Ä–æ–µ–∫—Ü–∏—è {ym_key}")]
    for u in sorted(users):
        fact, _ = db.month_sales(y, m, username=u)
        plan = db.get_plan(u, ym_key) or 0
        pace = (fact / day) if day > 0 else 0
        proj = round(pace * days_in_month)
        lines.append(f"{human_network_or_user(u)}: —Ñ–∞–∫—Ç {fact}, –ø–ª–∞–Ω {plan}, –ø—Ä–æ–µ–∫—Ü–∏—è {proj}")
    await bot.send_message(GROUP_CHAT_ID, "\n".join(lines))

async def weekly_stock_reminder():
    users = db.get_all_known_users()
    if not users:
        return
    mentions = " ".join(human_network_or_user(u) for u in users)
    txt = bold("üì¶ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å—Ç–æ–∫–∞—Ö") + "\n" + \
          "–û–±–Ω–æ–≤–∏—Ç–µ –æ—Å—Ç–∞—Ç–∫–∏ (–º–æ–¥–µ–ª—å –ø–∞–º—è—Ç—å ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ). " + mentions
    await bot.send_message(GROUP_CHAT_ID, txt)

async def monthly_report():
    d = now_ala()
    y, m = d.year, d.month
    ym_key = f"{y:04d}-{m:02d}"
    users = db.get_all_known_users()
    if not users:
        return

    lines = [bold(f"üèÅ –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç –∑–∞ {ym_key}")]
    total_all = 0
    plan_all = 0
    for u in sorted(users):
        fact, _ = db.month_sales(y, m, username=u)
        plan = db.get_plan(u, ym_key) or 0
        total_all += fact
        plan_all += plan
        lines.append(f"{human_network_or_user(u)}: {fact} / {plan} ({pct(fact, plan)})")
    lines.append(bold(f"–ò–¢–û–ì–û: {total_all} / {plan_all} ({pct(total_all, plan_all)})"))
    await bot.send_message(GROUP_CHAT_ID, "\n".join(lines))

async def inactive_promoters_reminder():
    cutoff = now_ala() - timedelta(days=2)
    users = db.get_all_known_users()
    lazy = []
    for u in users:
        last = get_last_sale_dt(u)
        if last is None or last < cutoff:
            lazy.append(u)
    if not lazy:
        return
    txt = bold("üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ") + "\n" + \
          "–ù–µ—Ç –ø—Ä–æ–¥–∞–∂ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 48 —á–∞—Å–æ–≤: " + ", ".join(human_network_or_user(u) for u in lazy)
    await bot.send_message(GROUP_CHAT_ID, txt)

# =========
#   MAIN
# =========
async def main():
    db.init()

    await bot.delete_webhook(drop_pending_updates=True)
    await bot.set_webhook(WEBHOOK_URL)

    scheduler = AsyncIOScheduler()
    scheduler.add_job(daily_report, "cron", hour=21, minute=0, timezone="Asia/Almaty")
    scheduler.add_job(weekly_projection, "cron", day_of_week="sun", hour=12, minute=0, timezone="Asia/Almaty")
    scheduler.add_job(weekly_stock_reminder, "cron", day_of_week="sun", hour=12, minute=0, timezone="Asia/Almaty")
    scheduler.add_job(monthly_report, "cron", day="last", hour=20, minute=0, timezone="Asia/Almaty")
    scheduler.add_job(inactive_promoters_reminder, "cron", hour=20, minute=30, timezone="Asia/Almaty")
    # –ê–≤—Ç–æ—Å–±—Ä–æ—Å –ø—Ä–æ–¥–∞–∂ –≤ –Ω–∞—á–∞–ª–µ –º–µ—Å—è—Ü–∞ (–∫–∞–∫ –æ–±—Å—É–∂–¥–∞–ª–∏)
    scheduler.add_job(db.reset_monthly_sales, "cron", day=1, hour=0, minute=5, timezone="Asia/Almaty")
    scheduler.start()

    app = web.Application()
    SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path="/webhook")

    async def health(request):
        return web.Response(text="OK")
    app.add_routes([web.get("/", health)])

    runner = web.AppRunner(app); await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", PORT); await site.start()

    print(f"üöÄ Webhook –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ {WEBHOOK_URL}")
    while True:
        await asyncio.sleep(3600)

if __name__ == "__main__":
    asyncio.run(main())
