import os
import re
import asyncio
import calendar
from datetime import datetime
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from pytz import timezone

from aiogram import Bot, Dispatcher, Router
from aiogram.types import Message
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode

from aiohttp import web   # HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render

import db

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
TOKEN = os.getenv("TOKEN")  # —Å–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω –≤ Render ‚Üí Environment
GROUP_CHAT_ID = int(os.getenv("GROUP_CHAT_ID", "-1000000000000"))
tz = timezone("Asia/Almaty")

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
router = Router()
dp.include_router(router)

# --- –ü—Ä–æ–¥–∞–∂–∏ ---
@router.message()
async def sales_handler(message: Message):
    if message.chat.id != GROUP_CHAT_ID:
        return
    text = message.text.strip().lower()
    if "–¥–æ–ª—è" in text:
        return
    try:
        pattern = re.compile(r"([a-z–∞-—è]+[\s]?\d+\w*)\s*(\d{2,4}(?:tb|—Ç–±)?)(?:\s*[-x]?\s*(\d+))?", re.IGNORECASE)
        matches = pattern.findall(text)
        if not matches:
            return
        for match in matches:
            model = match[0].replace(" ", "")
            memory = match[1]
            qty = int(match[2]) if match[2] else 1
            user = message.from_user.username or str(message.from_user.id)
            db.add_sale(user, model, memory, qty)
        await message.reply("‚úÖ –ü—Ä–æ–¥–∞–∂–∏ —É—á—Ç–µ–Ω—ã")
    except Exception as e:
        await message.reply(f"‚ö† –û—à–∏–±–∫–∞: {e}")

# --- –°—Ç–æ–∫–∏ ---
@router.message()
async def stock_handler(message: Message):
    if message.chat.id != GROUP_CHAT_ID:
        return
    text = message.text.strip().lower()
    if any(word in text for word in ["–ø—Ä–∏—Ö–æ–¥", "–ø—Ä–∏–µ—Ö–∞–ª", "–æ—Å—Ç–∞—Ç–æ–∫", "—Å—Ç–æ–∫"]):
        try:
            parts = message.text.split()
            if len(parts) < 2:
                return
            item, qty = parts[0], int(parts[1])
            user = message.from_user.username or str(message.from_user.id)
            db.update_stock(user, item, qty)
            await message.reply(f"üì¶ –°—Ç–æ–∫ –æ–±–Ω–æ–≤–ª—ë–Ω: {item} = {qty}")
        except Exception as e:
            await message.reply(f"‚ö† –û—à–∏–±–∫–∞ —Å—Ç–æ–∫–∞: {e}")

# --- –§–æ—Ç–æ ---
@router.message()
async def photo_handler(message: Message):
    if message.chat.id != GROUP_CHAT_ID:
        return
    if message.photo:
        user = message.from_user.username or str(message.from_user.id)
        db.add_photo(user)
        await message.reply("üì∏ –§–æ—Ç–æ —É—á—Ç–µ–Ω–æ")

# --- –ö–æ–º–∞–Ω–¥—ã ---
@router.message()
async def cmd_plan(message: Message):
    if message.text.startswith("/plan"):
        parts = message.text.split()
        if len(parts) != 3:
            await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /plan @username —á–∏—Å–ª–æ")
            return
        username = parts[1].lstrip("@")
        plan = int(parts[2])
        db.set_plan(username, plan)
        await message.reply(f"‚úÖ –ü–ª–∞–Ω –¥–ª—è @{username} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {plan}")

@router.message()
async def cmd_sales_month(message: Message):
    if message.text.startswith("/sales_month"):
        data = db.get_sales_month()
        if not data:
            await message.reply("üìä –ü—Ä–æ–¥–∞–∂–∏ —Å –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞: –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
            return
        report = "üìä –ü—Ä–æ–¥–∞–∂–∏ —Å –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞:\n"
        for username, qty, plan in data:
            percent = int(qty / plan * 100) if plan else 0
            report += f"@{username}: {qty} / –ø–ª–∞–Ω {plan or '-'} ‚Üí {percent}%\n"
        await message.reply(report)

# --- –ê–≤—Ç–æ–æ—Ç—á—ë—Ç—ã ---
async def daily_report():
    today = datetime.now(tz).strftime("%Y-%m-%d")
    sales = db.get_sales_all(today)
    if not sales:
        report = f"üìä –ü—Ä–æ–¥–∞–∂–∏ –∑–∞ {today}: –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö."
    else:
        report = f"üìä –ü—Ä–æ–¥–∞–∂–∏ –∑–∞ {today}:\n"
        for username, qty, plan in sales:
            percent = int(qty / plan * 100) if plan else 0
            report += f"@{username}: {qty} / –ø–ª–∞–Ω {plan or '-'} ‚Üí {percent}%\n"
    await bot.send_message(GROUP_CHAT_ID, report)

async def weekly_projection():
    today = datetime.now(tz)
    day_of_month = today.day
    total_days = calendar.monthrange(today.year, today.month)[1]
    data = db.get_sales_month()
    if not data:
        return
    report = "üîÆ –ü—Ä–æ–≥–Ω–æ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞:\n"
    for username, qty, plan in data:
        if not plan or plan == 0:
            continue
        avg = qty / day_of_month
        forecast = int(avg * total_days)
        percent = int(forecast / plan * 100)
        report += f"@{username}: —Å–µ–π—á–∞—Å {qty}/{plan}, –ø—Ä–æ–≥–Ω–æ–∑ {forecast} ({percent}%)\n"
    await bot.send_message(GROUP_CHAT_ID, report)

async def monthly_report():
    today = datetime.now(tz)
    data = db.get_sales_month()
    report = f"üìä –ò—Ç–æ–≥ –ø—Ä–æ–¥–∞–∂ –∑–∞ {today.strftime('%B %Y')}:\n"
    for username, qty, plan in data:
        percent = int(qty / plan * 100) if plan else 0
        report += f"@{username}: {qty} / –ø–ª–∞–Ω {plan or '-'} ‚Üí {percent}%\n"
    await bot.send_message(GROUP_CHAT_ID, report)
    db.reset_monthly_sales()

async def weekly_stock_reminder():
    await bot.send_message(GROUP_CHAT_ID, "üì¶ –ù–∞–ø–æ–º–Ω–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")

# --- HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render ---
async def handle(request):
    return web.Response(text="Bot is running!")

async def start_web():
    app = web.Application()
    app.router.add_get("/", handle)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", int(os.getenv("PORT", 5000)))
    await site.start()

# --- –¶–∏–∫–ª —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ (08:00‚Äì24:00) ---
async def run_bot_limited():
    while True:
        now = datetime.now(tz).time()
        if 8 <= now.hour < 24:  # –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            print("‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã (08:00‚Äì24:00) ‚Äî –±–æ—Ç –∑–∞–ø—É—â–µ–Ω ‚úÖ")
            try:
                await dp.start_polling(bot)
            except Exception as e:
                print(f"‚ö† –û—à–∏–±–∫–∞ polling: {e}")
                await asyncio.sleep(30)
        else:
            print("üò¥ –ù–æ—á—å ‚Äî –±–æ—Ç –æ—Ç–¥—ã—Ö–∞–µ—Ç –¥–æ 08:00")
            await asyncio.sleep(300)  # –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω

# --- –ì–ª–∞–≤–Ω–∞—è ---
async def main():
    scheduler = AsyncIOScheduler()
    scheduler.add_job(daily_report, "cron", hour=21, minute=0, timezone="Asia/Almaty")
    scheduler.add_job(weekly_projection, "cron", day_of_week="sun", hour=12, minute=0, timezone="Asia/Almaty")
    scheduler.add_job(weekly_stock_reminder, "cron", day_of_week="sun", hour=12, minute=0, timezone="Asia/Almaty")
    scheduler.add_job(monthly_report, "cron", day="last", hour=20, minute=0, timezone="Asia/Almaty")
    scheduler.start()

    # HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
    await start_web()

    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    await run_bot_limited()

if __name__ == "__main__":
    asyncio.run(main())
